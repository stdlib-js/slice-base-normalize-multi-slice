{
  "version": 3,
  "sources": ["../lib/error_out_of_bounds.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an error object for a slice which exceeds index bounds.\n*\n* @private\n* @returns {Object} error object\n*/\nfunction error() {\n\treturn {\n\t\t'code': 'ERR_SLICE_OUT_OF_BOUNDS'\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = error;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar MultiSlice = require( '@stdlib/slice-multi' );\nvar Slice = require( '@stdlib/slice-ctor' );\nvar normalizeSlice = require( '@stdlib/slice-base-normalize-slice' );\nvar eOutOfBounds = require( './error_out_of_bounds.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Normalizes an individual MultiSlice element.\n*\n* @private\n* @param {(Slice|integer|null)} value - input slice\n* @param {NonNegativeInteger} len - maximum number of elements which are allowed in a slice\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @returns {Slice} slice object\n*/\nfunction normalize( value, len, strict ) {\n\t// Case: null\n\tif ( value === null ) {\n\t\t// Create a slice with default extents and a default increment:\n\t\treturn new Slice( 0, len, 1 );\n\t}\n\t// Case: integer\n\tif ( typeof value === 'number' ) {\n\t\t// If a value exceeds the last possible index, create an \"empty\" slice...\n\t\tif ( value >= len ) {\n\t\t\tif ( strict ) {\n\t\t\t\treturn eOutOfBounds();\n\t\t\t}\n\t\t\treturn new Slice( len, len, 1 );\n\t\t}\n\t\t// Check whether we need to resolve a slice relative to the last possible index...\n\t\tif ( value < 0 ) {\n\t\t\tvalue = len + value;\n\n\t\t\t// If a value exceeds the first index, create an \"empty\" slice...\n\t\t\tif ( value < 0 ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\treturn eOutOfBounds();\n\t\t\t\t}\n\t\t\t\treturn new Slice( 0, 0, 1 );\n\t\t\t}\n\t\t\treturn new Slice( value, value+1, 1 ); // e.g., Slice( 2, 3, 1 ), which is the slice equivalent of only selecting the second row\n\t\t}\n\t\t// 0 <= s < N\n\t\treturn new Slice( value, value+1, 1 );\n\t}\n\t// Case: slice\n\treturn normalizeSlice( value, len, strict );\n}\n\n\n// MAIN //\n\n/**\n* Returns a normalized MultiSlice object.\n*\n* @param {MultiSlice} slice - input slice\n* @param {NonNegativeIntegerArray} shape - maximum allowed slice shape\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @returns {(MultiSlice|ErrorObject)} multi-slice object or an error object\n*\n* @example\n* var Slice = require( '@stdlib/slice-ctor' );\n* var MultiSlice = require( '@stdlib/slice-multi' );\n*\n* var shape = [ 10, 10, 10 ];\n*\n* var s1 = new MultiSlice( new Slice( 2, null, 2 ), null, -4 );\n* var s2 = normalizeMultiSlice( s1, shape, false );\n* // returns <MultiSlice>\n*\n* var d = s2.data;\n* // returns [ <Slice>, <Slice>, <Slice> ]\n*\n* var v = d[ 0 ];\n* // returns <Slice>\n*\n* var start = v.start;\n* // returns 2\n*\n* var stop = v.stop;\n* // returns 10\n*\n* var step = v.step;\n* // returns 2\n*\n* v = d[ 1 ];\n* // returns <Slice>\n*\n* start = v.start;\n* // returns 0\n*\n* stop = v.stop;\n* // returns 10\n*\n* step = v.step;\n* // returns 1\n*\n* v = d[ 2 ];\n* // returns <Slice>\n*\n* start = v.start;\n* // returns 6\n*\n* stop = v.stop;\n* // returns 7\n*\n* step = v.step;\n* // returns 1\n*/\nfunction normalizeMultiSlice( slice, shape, strict ) {\n\tvar data;\n\tvar args;\n\tvar s;\n\tvar i;\n\n\tdata = slice.data;\n\targs = [];\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\ts = normalize( data[ i ], shape[ i ], strict );\n\t\tif ( s.code !== void 0 ) {\n\t\t\treturn s;\n\t\t}\n\t\targs.push( s );\n\t}\n\n\t// Return a normalized slice:\n\treturn MultiSlice.apply( null, args );\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalizeMultiSlice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normalize a MultiSlice object.\n*\n* @module @stdlib/slice-base-normalize-multi-slice\n*\n* @example\n* var Slice = require( '@stdlib/slice-ctor' );\n* var MultiSlice = require( '@stdlib/slice-multi' );\n* var normalizeMultiSlice = require( '@stdlib/slice-base-normalize-multi-slice' );\n*\n* var shape = [ 10, 10, 10 ];\n*\n* var s1 = new MultiSlice( new Slice( 2, null, 2 ), null, -4 );\n* var s2 = normalizeMultiSlice( s1, shape, false );\n* // returns <MultiSlice>\n*\n* var d = s2.data;\n* // returns [ <Slice>, <Slice>, <Slice> ]\n*\n* var v = d[ 0 ];\n* // returns <Slice>\n*\n* var start = v.start;\n* // returns 2\n*\n* var stop = v.stop;\n* // returns 10\n*\n* var step = v.step;\n* // returns 2\n*\n* v = d[ 1 ];\n* // returns <Slice>\n*\n* start = v.start;\n* // returns 0\n*\n* stop = v.stop;\n* // returns 10\n*\n* step = v.step;\n* // returns 1\n*\n* v = d[ 2 ];\n* // returns <Slice>\n*\n* start = v.start;\n* // returns 6\n*\n* stop = v.stop;\n* // returns 7\n*\n* step = v.step;\n* // returns 1\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cA4BA,SAASC,GAAQ,CAChB,MAAO,CACN,KAAQ,yBACT,CACD,CAKAD,EAAO,QAAUC,ICrCjB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,qBAAsB,EAC5CC,EAAQ,QAAS,oBAAqB,EACtCC,EAAiB,QAAS,oCAAqC,EAC/DC,EAAe,IAcnB,SAASC,EAAWC,EAAOC,EAAKC,EAAS,CAExC,OAAKF,IAAU,KAEP,IAAIJ,EAAO,EAAGK,EAAK,CAAE,EAGxB,OAAOD,GAAU,SAEhBA,GAASC,EACRC,EACGJ,EAAa,EAEd,IAAIF,EAAOK,EAAKA,EAAK,CAAE,EAG1BD,EAAQ,GACZA,EAAQC,EAAMD,EAGTA,EAAQ,EACPE,EACGJ,EAAa,EAEd,IAAIF,EAAO,EAAG,EAAG,CAAE,EAEpB,IAAIA,EAAOI,EAAOA,EAAM,EAAG,CAAE,GAG9B,IAAIJ,EAAOI,EAAOA,EAAM,EAAG,CAAE,EAG9BH,EAAgBG,EAAOC,EAAKC,CAAO,CAC3C,CA8DA,SAASC,EAAqBC,EAAOC,EAAOH,EAAS,CACpD,IAAII,EACAC,EACAC,EACAC,EAIJ,IAFAH,EAAOF,EAAM,KACbG,EAAO,CAAC,EACFE,EAAI,EAAGA,EAAIH,EAAK,OAAQG,IAAM,CAEnC,GADAD,EAAIT,EAAWO,EAAMG,CAAE,EAAGJ,EAAOI,CAAE,EAAGP,CAAO,EACxCM,EAAE,OAAS,OACf,OAAOA,EAERD,EAAK,KAAMC,CAAE,CACd,CAGA,OAAOb,EAAW,MAAO,KAAMY,CAAK,CACrC,CAKAb,EAAO,QAAUS,IC/EjB,IAAIO,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_error_out_of_bounds", "__commonJSMin", "exports", "module", "error", "require_main", "__commonJSMin", "exports", "module", "MultiSlice", "Slice", "normalizeSlice", "eOutOfBounds", "normalize", "value", "len", "strict", "normalizeMultiSlice", "slice", "shape", "data", "args", "s", "i", "main"]
}
